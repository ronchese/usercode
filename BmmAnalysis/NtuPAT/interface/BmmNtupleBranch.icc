#include <iostream>

//#include "BmmNtupleBranch.h"

template <class T>
BmmNtupleBranch<T>::BmmNtupleBranch() {
}

template <class T>
void BmmNtupleBranch<T>::initTree() {

  // define branches
  // use local function "setBranch" (defined in the utility)
  // in place of ROOT "Branch" & "SetBranchAddress"

  // hlt

  // header
  this->setBranch( "runNumber"      , &  runNumber      ,
                   "runNumber/i"    , &b_runNumber       );
  this->setBranch( "lumiSection"    , &  lumiSection    ,
                   "lumiSection/i"  , &b_lumiSection     );
  this->setBranch( "eventNumber"    , &  eventNumber    ,
                   "eventNumber/i"  , &b_eventNumber     );

  if ( use_hlts      ) setBranches_hlts     ();
  if ( use_hlto      ) setBranches_hlto     ();
  if ( use_bspot     ) setBranches_bspot    ();
  if ( use_met       ) setBranches_met      ();
  if ( use_muons     ) setBranches_muons    ();
  if ( use_electrons ) setBranches_electrons();
  if ( use_taus      ) setBranches_taus     ();
  if ( use_jets      ) setBranches_jets     ();
  if ( use_pflow     ) setBranches_pflow    ();
  if ( use_tracks    ) setBranches_tracks   ();
  if ( use_pvts      ) setBranches_pVertices();
  if ( use_svts      ) setBranches_sVertices();
  if ( use_vtxps     ) setBranches_vtxps    ();
  if ( use_tkips     ) setBranches_tkips    ();
  if ( use_gen       ) setBranches_gen      ();

  return;

}

template <class T>
void BmmNtupleBranch<T>::setBranches_hlts() {
  // hlt status
  int size = 8192;
  this->setBranch( "nHLTStatus"     , &  nHLTStatus     ,
                   "nHLTStatus/I"   , &b_nHLTStatus      );
  this->setBranch( "hltPath"        , &  hltPath        ,
                   size, 99         , &b_hltPath         );
  this->setBranch( "hltVersion"     , &  hltVersion     ,
                   size, 99         , &b_hltVersion      );
  this->setBranch( "hltRun"         , &  hltRun         ,
                   size, 99         , &b_hltRun          );
  this->setBranch( "hltAccept"      , &  hltAccept      ,
                   size, 99         , &b_hltAccept       );
  return;
}

template <class T>
void BmmNtupleBranch<T>::setBranches_hlto() {
  // hlt objects
  int size = 8192;
  this->setBranch( "nHLTObjects"    , &  nHLTObjects    ,
                   "nHLTObjects/I"  , &b_nHLTObjects     );
  this->setBranch( "hltObjType"     , &  hltObjType     ,
                   size, 99         , &b_hltObjType      );
  if ( use_hlto_sphe ) {
  this->setBranch( "hltPt"          , &  hltPt          ,
                   size, 99         , &b_hltPt           );
  this->setBranch( "hltEta"         , &  hltEta         ,
                   size, 99         , &b_hltEta          );
  this->setBranch( "hltPhi"         , &  hltPhi         ,
                   size, 99         , &b_hltPhi          );
  }
  if ( use_hlto_cart ) {
  this->setBranch( "hltPx"          , &  hltPx          ,
                   size, 99         , &b_hltPx           );
  this->setBranch( "hltPy"          , &  hltPy          ,
                   size, 99         , &b_hltPy           );
  this->setBranch( "hltPz"          , &  hltPz          ,
                   size, 99         , &b_hltPz           );
  }
  this->setBranch( "hltE"           , &  hltE           ,
                   size, 99         , &b_hltE            );
  return;
}

template <class T>
void BmmNtupleBranch<T>::setBranches_bspot() {
  // beam spot
  this->setBranch( "bwX"            , &  bwX            ,
                   "bwX/D"          , &b_bwX             );
  this->setBranch( "bwY"            , &  bwY            ,
                   "bwY/D"          , &b_bwY             );
  this->setBranch( "bwXError"       , &  bwXError       ,
                   "bwXError/D"     , &b_bwXError        );
  this->setBranch( "bwYError"       , &  bwYError       ,
                   "bwYError/D"     , &b_bwYError        );
  this->setBranch( "bsX"            , &  bsX            ,
                   "bsX/D"          , &b_bsX             );
  this->setBranch( "bsY"            , &  bsY            ,
                   "bsY/D"          , &b_bsY             );
  this->setBranch( "bsZ"            , &  bsZ            ,
                   "bsZ/D"          , &b_bsZ             );
  this->setBranch( "bsXError"       , &  bsXError       ,
                   "bsXError/D"     , &b_bsXError        );
  this->setBranch( "bsYError"       , &  bsYError       ,
                   "bsYError/D"     , &b_bsYError        );
  this->setBranch( "bsZError"       , &  bsZError       ,
                   "bsZError/D"     , &b_bsZError        );
  this->setBranch( "bsdXdZ"         , &  bsdXdZ         ,
                   "bsdXdZ/D"       , &b_bsdXdZ          );
  this->setBranch( "bsdYdZ"         , &  bsdYdZ         ,
                   "bsdYdZ/D"       , &b_bsdYdZ          );
  this->setBranch( "bsdXdZError"    , &  bsdXdZError    ,
                   "bsdXdZError/D"  , &b_bsdXdZError     );
  this->setBranch( "bsdYdZError"    , &  bsdYdZError    ,
                   "bsdYdZError/D"  , &b_bsdYdZError     );
  return;
}

template <class T>
void BmmNtupleBranch<T>::setBranches_met() {
  // met
  this->setBranch( "mEt"            , &  mEt            ,
                   "mEt/D"          , &b_mEt             );
  this->setBranch( "mEx"            , &  mEx            ,
                   "mEx/D"          , &b_mEx             );
  this->setBranch( "mEy"            , &  mEy            ,
                   "mEy/D"          , &b_mEy             );
  return;
}

template <class T>
void BmmNtupleBranch<T>::setBranches_muons() {
  // muons
  int size = 8192;
  this->setBranch( "nMuons"         , &  nMuons         ,
                   "nMuons/I"       , &b_nMuons          );
  if ( use_muons_sphe ) {
  this->setBranch( "muoPt"          , &  muoPt          ,
                   size, 99         , &b_muoPt           );
  this->setBranch( "muoEta"         , &  muoEta         ,
                   size, 99         , &b_muoEta          );
  this->setBranch( "muoPhi"         , &  muoPhi         ,
                   size, 99         , &b_muoPhi          );
  }
  if ( use_muons_cart ) {
  this->setBranch( "muoPx"          , &  muoPx          ,
                   size, 99         , &b_muoPx           );
  this->setBranch( "muoPy"          , &  muoPy          ,
                   size, 99         , &b_muoPy           );
  this->setBranch( "muoPz"          , &  muoPz          ,
                   size, 99         , &b_muoPz           );
  }
  this->setBranch( "muoE"           , &  muoE           ,
                   size, 99         , &b_muoE            );
  this->setBranch( "muoTrk"         , &  muoTrk         ,
                   size, 99         , &b_muoTrk          );
  this->setBranch( "muoTrg"         , &  muoTrg         ,
                   size, 99         , &b_muoTrg          );
  this->setBranch( "muoCharge"      , &  muoCharge      ,
                   size, 99         , &b_muoCharge       );
  this->setBranch( "muoChaIso"      , &  muoChaIso      ,
                   size, 99         , &b_muoChaIso       );
  this->setBranch( "muoNeuIso"      , &  muoNeuIso      ,
                   size, 99         , &b_muoNeuIso       );
  this->setBranch( "muoPhoIso"      , &  muoPhoIso      ,
                   size, 99         , &b_muoPhoIso       );
  this->setBranch( "muoSumCHpt"     , &  muoSumCHpt     ,
                   size, 99         , &b_muoSumCHpt      );
  this->setBranch( "muoSumCPpt"     , &  muoSumCPpt     ,
                   size, 99         , &b_muoSumCPpt      );
  this->setBranch( "muoSumNHet"     , &  muoSumNHet     ,
                   size, 99         , &b_muoSumNHet      );
  this->setBranch( "muoSumPHet"     , &  muoSumPHet     ,
                   size, 99         , &b_muoSumPHet      );
  this->setBranch( "muoSumPUpt"     , &  muoSumPUpt     ,
                   size, 99         , &b_muoSumPUpt      );
  this->setBranch( "muoNumMatches"  , &  muoNumMatches  ,
                   size, 99         , &b_muoNumMatches   );
  this->setBranch( "muoDb"          , &  muoDb          ,
                   size, 99         , &b_muoDb           );
  this->setBranch( "muoNumValidHits", &  muoNumValidHits,
                   size, 99         , &b_muoNumValidHits );
  this->setBranch( "muoNormChi2"    , &  muoNormChi2    ,
                   size, 99         , &b_muoNormChi2     );
  this->setBranch( "muoNumMuHits"   , &  muoNumMuHits   ,
                   size, 99         , &b_muoNumMuHits    );
  this->setBranch( "muoNumPixHits"  , &  muoNumPixHits  ,
                   size, 99         , &b_muoNumPixHits   );
  this->setBranch( "muoNumTkHits"   , &  muoNumTkHits   ,
                   size, 99         , &b_muoNumTkHits    );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_electrons() {
  // electrons
  int size = 8192;
  this->setBranch( "nElectrons"     , &  nElectrons     ,
                   "nElectrons/I"   , &b_nElectrons      );
  if ( use_electrons_sphe ) {
  this->setBranch( "elePt"          , &  elePt          ,
                   size, 99         , &b_elePt           );
  this->setBranch( "eleEta"         , &  eleEta         ,
                   size, 99         , &b_eleEta          );
  this->setBranch( "elePhi"         , &  elePhi         ,
                   size, 99         , &b_elePhi          );
  }
  if ( use_electrons_cart ) {
  this->setBranch( "elePx"          , &  elePx          ,
                   size, 99         , &b_elePx           );
  this->setBranch( "elePy"          , &  elePy          ,
                   size, 99         , &b_elePy           );
  this->setBranch( "elePz"          , &  elePz          ,
                   size, 99         , &b_elePz           );
  }
  this->setBranch( "eleE"           , &  eleE           ,
                   size, 99         , &b_eleE            );
  this->setBranch( "eleTrk"         , &  eleTrk         ,
                   size, 99         , &b_eleTrk          );
  this->setBranch( "eleTrg"         , &  eleTrg         ,
                   size, 99         , &b_eleTrg          );
  this->setBranch( "eleCharge"      , &  eleCharge      ,
                   size, 99         , &b_eleCharge       );
  this->setBranch( "eleChaIso"      , &  eleChaIso      ,
                   size, 99         , &b_eleChaIso       );
  this->setBranch( "eleNeuIso"      , &  eleNeuIso      ,
                   size, 99         , &b_eleNeuIso       );
  this->setBranch( "elePhoIso"      , &  elePhoIso      ,
                   size, 99         , &b_elePhoIso       );
  this->setBranch( "eleAbsEta"      , &  eleAbsEta      ,
                   size, 99         , &b_eleAbsEta       );
  this->setBranch( "eleAEff"        , &  eleAEff        ,
                   size, 99         , &b_eleAEff         );
  this->setBranch( "eleID"          , &  eleID          ,
                   size, 99         , &b_eleID           );
  this->setBranch( "eleConsCha"     , &  eleConsCha     ,
                   size, 99         , &b_eleConsCha      );
  this->setBranch( "eleEBEEGap"     , &  eleEBEEGap     ,
                   size, 99         , &b_eleEBEEGap      );
  this->setBranch( "eleDb"          , &  eleDb          ,
                   size, 99         , &b_eleDb           );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_taus() {
  // taus
  int size = 8192;
  this->setBranch( "nTaus"          , &  nTaus          ,
                   "nTaus/I"        , &b_nTaus           );
  if ( use_taus_sphe ) {
  this->setBranch( "tauPt"          , &  tauPt          ,
                   size, 99         , &b_tauPt           );
  this->setBranch( "tauEta"         , &  tauEta         ,
                   size, 99         , &b_tauEta          );
  this->setBranch( "tauPhi"         , &  tauPhi         ,
                   size, 99         , &b_tauPhi          );
  }
  if ( use_taus_cart ) {
  this->setBranch( "tauPx"          , &  tauPx          ,
                   size, 99         , &b_tauPx           );
  this->setBranch( "tauPy"          , &  tauPy          ,
                   size, 99         , &b_tauPy           );
  this->setBranch( "tauPz"          , &  tauPz          ,
                   size, 99         , &b_tauPz           );
  }
  this->setBranch( "tauE"           , &  tauE           ,
                   size, 99         , &b_tauE            );
  this->setBranch( "tauCharge"      , &  tauCharge      ,
                   size, 99         , &b_tauCharge       );
  this->setBranch( "tauTrg"         , &  tauTrg         ,
                   size, 99         , &b_tauTrg          );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_jets() {
  // jets
  int size = 8192;
  this->setBranch( "nJets"          , &  nJets          ,
                   "nJets/I"        , &b_nJets           );
  if ( use_jets_sphe ) {
  this->setBranch( "jetPt"          , &  jetPt          ,
                   size, 99         , &b_jetPt           );
  this->setBranch( "jetEta"         , &  jetEta         ,
                   size, 99         , &b_jetEta          );
  this->setBranch( "jetPhi"         , &  jetPhi         ,
                   size, 99         , &b_jetPhi          );
  }
  if ( use_jets_cart ) {
  this->setBranch( "jetPx"          , &  jetPx          ,
                   size, 99         , &b_jetPx           );
  this->setBranch( "jetPy"          , &  jetPy          ,
                   size, 99         , &b_jetPy           );
  this->setBranch( "jetPz"          , &  jetPz          ,
                   size, 99         , &b_jetPz           );
  }
  this->setBranch( "jetE"           , &  jetE           ,
                   size, 99         , &b_jetE            );
  this->setBranch( "jetCSV"         , &  jetCSV         ,
                   size, 99         , &b_jetCSV          );
  this->setBranch( "jetTCHE"        , &  jetTCHE        ,
                   size, 99         , &b_jetTCHE         );
  this->setBranch( "jetTrg"         , &  jetTrg         ,
                   size, 99         , &b_jetTrg          );
  this->setBranch( "jetPF"          , &  jetPF          ,
                   size, 99         , &b_jetPF           );
  this->setBranch( "jetNDau"        , &  jetNDau        ,
                   size, 99         , &b_jetNDau         );
  this->setBranch( "jetNHF"         , &  jetNHF         ,
                   size, 99         , &b_jetNHF          );
  this->setBranch( "jetNEF"         , &  jetNEF         ,
                   size, 99         , &b_jetNEF          );
  this->setBranch( "jetCHF"         , &  jetCHF         ,
                   size, 99         , &b_jetCHF          );
  this->setBranch( "jetCEF"         , &  jetCEF         ,
                   size, 99         , &b_jetCEF          );
  this->setBranch( "jetNCH"         , &  jetNCH         ,
                   size, 99         , &b_jetNCH          );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_pflow() {
  // particle flow
  int size = 32768;
  this->setBranch( "nPF"            , &  nPF            ,
                   "nPF/I"          , &b_nPF             );
  this->setBranch( "pfcPt"          , &  pfcPt          ,
                   size, 99         , &b_pfcPt           );
  if ( use_pflow_sphe ) {
  this->setBranch( "pfcEta"         , &  pfcEta         ,
                   size, 99         , &b_pfcEta          );
  this->setBranch( "pfcPhi"         , &  pfcPhi         ,
                   size, 99         , &b_pfcPhi          );
  this->setBranch( "pfcPx"          , &  pfcPx          ,
                   size, 99         , &b_pfcPx           );
  }
  if ( use_pflow_cart ) {
  this->setBranch( "pfcPy"          , &  pfcPy          ,
                   size, 99         , &b_pfcPy           );
  this->setBranch( "pfcPz"          , &  pfcPz          ,
                   size, 99         , &b_pfcPz           );
  this->setBranch( "pfcE"           , &  pfcE           ,
                   size, 99         , &b_pfcE            );
  }
  this->setBranch( "pfcCharge"      , &  pfcCharge      ,
                   size, 99         , &b_pfcCharge       );
  this->setBranch( "pfcJet"         , &  pfcJet         ,
                   size, 99         , &b_pfcJet          );
  this->setBranch( "pfcTrk"         , &  pfcTrk         ,
                   size, 99         , &b_pfcTrk          );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_tracks() {
  // tracks
  int size = 32768;
  this->setBranch( "nTracks"     , &  nTracks     ,
                   "nTracks/I"   , &b_nTracks      );
  if ( use_tracks_sphe ) {
  this->setBranch( "trkPt"          , &  trkPt          ,
                   size, 99         , &b_trkPt           );
  this->setBranch( "trkEta"         , &  trkEta         ,
                   size, 99         , &b_trkEta          );
  this->setBranch( "trkPhi"         , &  trkPhi         ,
                   size, 99         , &b_trkPhi          );
  }
  if ( use_tracks_cart ) {
  this->setBranch( "trkPx"          , &  trkPx          ,
                   size, 99         , &b_trkPx           );
  this->setBranch( "trkPy"          , &  trkPy          ,
                   size, 99         , &b_trkPy           );
  this->setBranch( "trkPz"          , &  trkPz          ,
                   size, 99         , &b_trkPz           );
  }
  this->setBranch( "trkCharge"      , &  trkCharge      ,
                   size, 99         , &b_trkCharge       );
  this->setBranch( "trkPFC"         , &  trkPFC         ,
                   size, 99         , &b_trkPFC          );
  this->setBranch( "trkJet"         , &  trkJet         ,
                   size, 99         , &b_trkJet          );
  this->setBranch( "trkPVtx"        , &  trkPVtx        ,
                   size, 99         , &b_trkPVtx         );
//  this->setBranch( "trkSVtx"        , &  trkSVtx        ,
//                   size, 99         , &b_trkSVtx         );
  this->setBranch( "trkQuality"     , &  trkQuality     ,
                   size, 99         , &b_trkQuality      );
  this->setBranch( "trkNormChi2"    , &  trkNormChi2    ,
                   size, 99         , &b_trkNormChi2     );
  this->setBranch( "trkDxy"         , &  trkDxy         ,
                   size, 99         , &b_trkDxy          );
  this->setBranch( "trkDz"          , &  trkDz          ,
                   size, 99         , &b_trkDz           );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_pVertices() {
  // primary vertices
  int size = 8192;
  this->setBranch( "nPVertices"     , &  nPVertices     ,
                   "nPVertices/I"   , &b_nPVertices      );
  this->setBranch( "pvtX"           , &  pvtX           ,
                   size, 99         , &b_pvtX            );
  this->setBranch( "pvtY"           , &  pvtY           ,
                   size, 99         , &b_pvtY            );
  this->setBranch( "pvtZ"           , &  pvtZ           ,
                   size, 99         , &b_pvtZ            );
  this->setBranch( "pvtSxx"         , &  pvtSxx         ,
                   size, 99         , &b_pvtSxx          );
  this->setBranch( "pvtSyy"         , &  pvtSyy         ,
                   size, 99         , &b_pvtSyy          );
  this->setBranch( "pvtSzz"         , &  pvtSzz         ,
                   size, 99         , &b_pvtSzz          );
  this->setBranch( "pvtSxy"         , &  pvtSxy         ,
                   size, 99         , &b_pvtSxy          );
  this->setBranch( "pvtSxz"         , &  pvtSxz         ,
                   size, 99         , &b_pvtSxz          );
  this->setBranch( "pvtSyz"         , &  pvtSyz         ,
                   size, 99         , &b_pvtSyz          );
//  this->setBranch( "pvtCovariance"  , &  pvtCovariance  ,
//                   size, 99         , &b_pvtCovariance   );
  this->setBranch( "pvtNTracks"     , &  pvtNTracks     ,
                   size, 99         , &b_pvtNTracks      );
  this->setBranch( "pvtNormChi2"    , &  pvtNormChi2    ,
                   size, 99         , &b_pvtNormChi2     );
  this->setBranch( "pvtBadQuality"  , &  pvtBadQuality  ,
                   size, 99         , &b_pvtBadQuality   );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_sVertices() {
  // secondary vertices
  int size = 8192;
  this->setBranch( "nSVertices"     , &  nSVertices     ,
                   "nSVertices/I"   , &b_nSVertices      );
  this->setBranch( "svtX"           , &  svtX           ,
                   size, 99         , &b_svtX            );
  this->setBranch( "svtY"           , &  svtY           ,
                   size, 99         , &b_svtY            );
  this->setBranch( "svtZ"           , &  svtZ           ,
                   size, 99         , &b_svtZ            );
  this->setBranch( "svtSxx"         , &  svtSxx         ,
                   size, 99         , &b_svtSxx          );
  this->setBranch( "svtSyy"         , &  svtSyy         ,
                   size, 99         , &b_svtSyy          );
  this->setBranch( "svtSzz"         , &  svtSzz         ,
                   size, 99         , &b_svtSzz          );
  this->setBranch( "svtSxy"         , &  svtSxy         ,
                   size, 99         , &b_svtSxy          );
  this->setBranch( "svtSxz"         , &  svtSxz         ,
                   size, 99         , &b_svtSxz          );
  this->setBranch( "svtSyz"         , &  svtSyz         ,
                   size, 99         , &b_svtSyz          );
  this->setBranch( "svtDirX"        , &  svtDirX        ,
                   size, 99         , &b_svtDirX         );
  this->setBranch( "svtDirY"        , &  svtDirY        ,
                   size, 99         , &b_svtDirY         );
  this->setBranch( "svtDirZ"        , &  svtDirZ        ,
                   size, 99         , &b_svtDirZ         );
  this->setBranch( "svtType"        , &  svtType        ,
                   size, 99         , &b_svtType         );
  this->setBranch( "svtNTracks"     , &  svtNTracks     ,
                   size, 99         , &b_svtNTracks      );
  this->setBranch( "svtNormChi2"    , &  svtNormChi2    ,
                   size, 99         , &b_svtNormChi2     );
  this->setBranch( "svtMass"        , &  svtMass        ,
                   size, 99         , &b_svtMass         );
  this->setBranch( "svtDist2D"      , &  svtDist3D      ,
                   size, 99         , &b_svtDist3D       );
  this->setBranch( "svtSign2D"      , &  svtSign3D      ,
                   size, 99         , &b_svtSign3D       );
  this->setBranch( "svtDist3D"      , &  svtDist3D      ,
                   size, 99         , &b_svtDist3D       );
  this->setBranch( "svtSign3D"      , &  svtSign3D      ,
                   size, 99         , &b_svtSign3D       );
  this->setBranch( "svtJet"         , &  svtJet         ,
                   size, 99         , &b_svtJet          );
  this->setBranch( "svtBadQuality"  , &  svtBadQuality  ,
                   size, 99         , &b_svtBadQuality   );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_tkips() {
  // refitted vertices tracks
  int size = 8192;
  this->setBranch( "nTkIPs"         , &  nTkIPs         ,
                   "nTkIPs/I"       , &b_nTkIPs          );
  this->setBranch( "tipTrk"         , &  tipTrk         ,
                   size, 99         , &b_tipTrk          );
  this->setBranch( "tipSVtx"        , &  tipSVtx        ,
                   size, 99         , &b_tipSVtx         );
  this->setBranch( "tipDxy"         , &  tipDxy         ,
                   size, 99         , &b_tipDxy          );
  this->setBranch( "tipDz"          , &  tipDz          ,
                   size, 99         , &b_tipDz           );
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_vtxps() {
  // momenta at vertices
  int size = 32768;
  this->setBranch( "nVtxPs"         , &  nVtxPs         ,
                   "nVtxPs/I"       , &b_nVtxPs          );
  this->setBranch( "tvpTrk"         , &  tvpTrk         ,
                   size, 99         , &b_tvpTrk          );
  if ( use_vtxps_sphe ) {
  this->setBranch( "tvpPt"          , &  tvpPt          ,
                   size, 99         , &b_tvpPt           );
  this->setBranch( "tvpEta"         , &  tvpEta         ,
                   size, 99         , &b_tvpEta          );
  this->setBranch( "tvpPhi"         , &  tvpPhi         ,
                   size, 99         , &b_tvpPhi          );
  }
  if ( use_vtxps_cart ) {
  this->setBranch( "tvpPx"          , &  tvpPx          ,
                   size, 99         , &b_tvpPx           );
  this->setBranch( "tvpPy"          , &  tvpPy          ,
                   size, 99         , &b_tvpPy           );
  this->setBranch( "tvpPz"          , &  tvpPz          ,
                   size, 99         , &b_tvpPz           );
  }
  return;
}


template <class T>
void BmmNtupleBranch<T>::setBranches_gen() {
  // gen particles
  int size = 65536;
  this->setBranch( "nGenP"          , &  nGenP          ,
                   "nGenP/I"        , &b_nGenP           );
  this->setBranch( "genId"          , &  genId          ,
                   size, 99         , &b_genId           );
  this->setBranch( "genStatus"      , &  genStatus      ,
                   size, 99         , &b_genStatus       );
  this->setBranch( "genMother"      , &  genMother      ,
                   size, 99         , &b_genMother       );
  if ( use_gen_sphe ) {
  this->setBranch( "genPt"          , &  genPt          ,
                   size, 99         , &b_genPt           );
  this->setBranch( "genEta"         , &  genEta         ,
                   size, 99         , &b_genEta          );
  this->setBranch( "genPhi"         , &  genPhi         ,
                   size, 99         , &b_genPhi          );
  }
  if ( use_gen_cart ) {
  this->setBranch( "genPx"          , &  genPx          ,
                   size, 99         , &b_genPx           );
  this->setBranch( "genPy"          , &  genPy          ,
                   size, 99         , &b_genPy           );
  this->setBranch( "genPz"          , &  genPz          ,
                   size, 99         , &b_genPz           );
  }
  this->setBranch( "genE"           , &  genE           ,
                   size, 99         , &b_genE            );
  this->setBranch( "genCharge"      , &  genCharge      ,
                   size, 99         , &b_genCharge       );
  this->setBranch( "genMass"        , &  genMass        ,
                   size, 99         , &b_genMass         );
  return;
}

template <class T>
BmmNtupleBranch<T>::~BmmNtupleBranch() {
}


